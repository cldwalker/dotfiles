Vimdb.vim = 'mvim -v'
Vimdb.plugins_dir = '(plugins|autoload)'

# Additional commands for keys
class Vimdb::Runner < Thor
  method_option :list, :desc => 'only prints list of keys left'
  desc 'left KEY', 'Determines keys left for a given key combo'
  def left(key_combo)
    query = '^' + Regexp.escape(key_combo)
    query << '[a-z]' if query.end_with?('-')
    regex = Regexp.new query
    keys = Vimdb.user.items
    keys.select! {|e| e[:key] =~ regex }

    available = ('a' .. 'z').to_a
    if key_combo.end_with? '-'
      available.map! {|e| key_combo + e }
      available -= keys.map {|e| e[:key][/^\S+/] }.compact
    elsif key_combo[/-\S/]
      available.map! {|e| "#{key_combo} #{e}" }
      if !keys.empty? && keys.all? {|e| e[:key] == key_combo }
        abort "This key is a top level key"
      end
      available -= keys.map {|e| e[:key] }
    else
      abort "Invalid query. Query must be the beginning of a key combo" +
        " i.e. C- or C-a."
    end

    if options[:list]
      available << "No combinations left" if available.empty?
      puts available, "#{available.size} keys left"
    else
      keys += available.map {|key| {key: key, desc: '** AVAILABLE **'} }
      keys.sort_by! {|e| e[:key] }
      puts Hirb::Helpers::Table.render(keys,
       fields: [:key, :mode, :from, :desc], headers: {:desc => 'desc/action'})
    end
  end

  desc 'conflict', 'List conflict keys'
  def conflict
    keys = Vimdb.user.items
    defaults = keys.select {|e| e[:from] == 'default' }.
      each_with_object({}) {|e,t| t[e[:key]] = e }
    conflicts = []
    keys.each {|e|
      if e[:from] != 'default' && (default = defaults[e[:key]]) &&
          modes_are_same?(e, default)
        conflicts << default
        conflicts << e
      end
    }
    puts Hirb::Helpers::Table.render(conflicts,
      fields: [:key, :mode, :from, :desc], headers: {desc: 'desc/action'})
  end

  common_search_options
  desc 'anki [QUERY]', 'Prints out item info in tab format for anki'
  def anki(query = nil)
    require 'cgi'
    keys = Vimdb.user.search(query, options)
    keys.group_by {|e| e[:desc] }.each {|desc,common_keys|
      puts "#{CGI.escapeHTML(desc)}<br/>mode: #{common_keys.map {|e| e[:mode] }.uniq.join(',')}" +
        "\t" + CGI.escapeHTML(common_keys.map {|e| e[:key] }.uniq.join(', '))
    }
  end

  private

  def modes_are_same?(key1, key2)
    (key1[:mode].split('') & key2[:mode].split('')).any?
  end
end

# vim: ft=ruby
