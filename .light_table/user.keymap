{:+ {:app {"alt-tab" [:tabset.next]
           "cmd-k" [:clear-inline-results]
           "alt-d" [:dev-inspector]}

     :editor {"alt-w" [:editor.watch.watch-selection]
              "alt-shift-w" [:editor.watch.unwatch]
              ;; has to be here instead of <Space>-ti b/c of selection limitation
              "alt-," [:ltfiles.toggle-current-inline-result]
              "alt-v" [:ltfiles.vim-visual-mode]

              "cmd-=" [:paredit.select.parent :smart-indent-selection :paredit.select.clear]
              ;;Eval the parent ( ... )
              "alt-enter" [(:paredit.select.parent "(")
                           :eval-editor-form
                           :paredit.select.clear]
              ;; requires master until 0.0.2 paredit
              "alt-s" [:paredit.unwrap.parent]}

     :editor.keys.normal {
                          ;;; for leader keys that work in normal mode see :vim/map-keys in behaviors
                          ;;; cmd-/ is a leader for multi-command keys - must be in insert mode :(

                          "cmd-/ c" [:tabset.new :tabset.next :console-tab]
                          ;; open browser tab with focus to type url
                          "cmd-/ o" [:add-browser-tab :browser.url-bar.focus]
                          ;; view current html in a split window
                          "cmd-/ s" [:tabset.new :tabset.next :editor.open-current-file-in-browser]

                          ;; a dumb wrap - cursor must be before word
                          ;; a smarter one would 'Bh' if in middle of word
                          "cmd-." [(:editor.open-pair "(") :paredit.grow.right]}

     ;; thanks to https://groups.google.com/forum/#!topic/light-table-discussion/BIyWHnRcoWc
     :editor.keys.vim.normal {">" [:paredit.grow.right]
                              "<" [:paredit.shrink.right]
                              "alt-shift-." [:paredit.shrink.left]
                              "alt-shift-," [:paredit.grow.left]

                              ;;Select the parent expression, whether that's [], {}, or ()
                              "cmd-," [:paredit.select.parent]
                              "cmd-;" [:toggle-comment-selection]}

     ;; avoid going to out of the way keys for command bar
     :filter-list.input { "ctrl-n" [(:filter-list.input.move-selection 1)]
                          "ctrl-p" [(:filter-list.input.move-selection -1)]}

     ;; Broken alt combos: i,e
     ;; thanks to https://github.com/jamii/lt-config/
     :editor.clj {"alt-p" [(:eval.custom "(with-out-str (clojure.pprint/write __SELECTION__ :suppress-namespaces false :dispatch clojure.pprint/code-dispatch))" {:result-type :inline :verbatim true})]
                  "alt-m" [(:eval.custom "(with-out-str (clojure.pprint/write (macroexpand-1 '__SELECTION__) :suppress-namespaces false :dispatch clojure.pprint/code-dispatch))" {:result-type :inline :verbatim true})]
                  "alt-b" [(:eval.custom "(with-out-str (time (do __SELECTION__)))" {:result-type :inline :verbatim true})]
                  "alt-r" [(:eval.custom "(clojure.test/run-tests)" {:result-type :statusbar})]
                  "alt-shift-b" [(:eval.custom "(do (require '[criterium.core]) (with-out-str (criterium.core/bench (do __SELECTION__))))" {:result-type :inline :verbatim true})]
                  ;; watches
                  "alt-shift-p" [(:editor.watch.custom-watch-selection "(let [result (do __SELECTION__)] (prn __SELECTION*__ result) __|result|__ result)" {})]
                  "alt-t" [(:editor.watch.custom-watch-selection "(let [start (java.lang.System/nanoTime)
                                                                 res (do __SELECTION__)]
                                                                 __|(str (float (/ (- (java.lang.System/nanoTime) start) 1000000)) \" ms\")|__
                                                                 res)" {:class "timed" :verbatim true})]}}
 }
