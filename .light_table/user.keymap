;; User keymap
;; -----------------------------
;; Keymaps are stored as a set of diffs that are merged together together
;; to create the final set of keys. You can modify these diffs to either add
;; or subtract bindings.
;;
;; Like behaviors, keys are bound by tag. When objects with those tags are active
;; the key bindings are live. Keys can be bound to any number of Light Table commands,
;; allowing you the flexibility to execute multiple operations together. To see a list
;; of all the commands you can execute, start typing a word related to the thing you
;; want to do in between the square brackets (e.g. type "editor").

{:+ {:app {"alt-tab" [:tabset.next]
           "cmd-k" [:clear-inline-results]}

     :editor {"alt-w" [:editor.watch.watch-selection]
              "alt-shift-w" [:editor.watch.unwatch]
              ;; buggy?
              ;; "cmd.- l" [(:editor.open-pair "(")]

              "cmd-=" [:paredit.select.parent :smart-indent-selection :paredit.select.clear]
              ;;Eval the parent ( ... )
              "alt-enter" [(:paredit.select.parent "(")
                           :eval-editor-form
                           :paredit.select.clear]

              ;; requires master until 0.0.2 paredit
              "alt-s" [:paredit.unwrap.parent]}

     ;; thanks to https://groups.google.com/forum/#!topic/light-table-discussion/BIyWHnRcoWc
     :editor.keys.vim.normal {">" [:paredit.grow.right]
                              "<" [:paredit.shrink.right]
                              "alt-shift-." [:paredit.shrink.left]
                              "alt-shift-," [:paredit.grow.left]
                              ;;Select the parent expression, whether that's [], {}, or ()
                              "cmd-," [:paredit.select.parent]
                              "cmd-;" [:toggle-comment-selection]}}}