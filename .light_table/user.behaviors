;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")
           (:lt.objs.plugins/load-js "recall.js" true)
           (:lt.plugins.vim/map-keys {"-" "$",
                                      "0" "^",
                                      "j" "gj",
                                      "k" "gk"
                                      ;; <Space> is a leader key in normal mode
                                      "<Space>b" ":ltexec behaviors.modify-user"
                                      "<Space>c" ":ltexec clear-console"
                                      "<Space>k" ":ltexec keymap.modify-user"
                                      "<Space>p" ":ltexec plugin-manager.show"
                                      "<Space>tc" ":ltexec toggle-console"
                                      "<Space>v" ":ltexec tabset.new"
                                      "<Space>w" ":ltexec workspace.show"
                                      "<Space>x" ":ltexec tabset.close"})]

     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/no-wrap
              (:lt.objs.style/set-theme "cobalt")
              (:lt.plugins.vim/activate-vim)

              ;; (un)comment below to toggle line numbers
              ;; :lt.objs.editor/line-numbers
              :lt.objs.editor/hide-line-numbers
              ]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)]}

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app [:lt.objs.intro/show-intro]
     ;; turn off aggressive autocomplete
     :editor [:lt.plugins.auto-complete/auto-show-on-input]
     ;; turn off annoying info boxes while editing any behavior
     :editor.behaviors [:lt.objs.langs.behaviors/show-info-on-move]}}
