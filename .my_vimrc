"EOF
	com! -nargs=1 -range Tabber call Replacetab(<line1>,<line2>,<f-args>)
	"functions
		fu! Replacetab(line1,line2,tab)
			exe a:line1.",".a:line2 ."perldo correctlevel('',".a:tab . ");"
		endf
		function! Omove(in)
			let inum1 = indent(".") / &tabstop
			exe "normal" a:in
			let inum2 = indent(".") / &tabstop
			"echo inum1 inum2
			while inum1 != inum2
				exe "normal" a:in
				let inum2 = indent(".") / &tabstop
				"echo inum1 inum2
			endwhile
		endfunction
		function! Insert(value)
			let @y = a:value
			normal! ^"yP
		endfunction
		fu! Join(delim)
			let i = 1
			"numarg = input ("Num? ")
			while i < numarg
				exe "normal Jr".a:delim
				let i = i +1
			endwhile
		endf
		fu! Consolemenu()
			so $VIMRUNTIME/menu.vim
			set wildmenu
			set cpo-=<
			set wildmode=full
			set wcm=<C-Z>
		endf
		fu! Tabm()
			let temp = &ts
			let &ts = temp - 1
			let &sw = &ts
		endf
		fu! Tabp()
			let temp = &ts
			let &ts = temp + 1
			let &sw = &ts
		endf
		fu! TagSelection()
			let l:tag = input("Tag name? ")
			" Strip off all but the first work in the tag for the end tag
			exec "normal `>a</" . substitute( l:tag, '[ \t"]*\(\<\w*\>\).*', '\1>\e', "" )
			exec "normal `<i"  substitute( l:tag, '[ \t"]*\(\<.*\)', '<\1>\e', "" )
		endf	
	"keys
		"insert +cmd
			map! <C-A>	<Home>
			map! <C-E>	<End>
			cmap <C-Y>	<Left>
			map! <C-L>	<Right>
			map! <C-B>	<S-Left>
			map! <C-F>	<S-Right>
			"cnoremap <S-Tab>	<C-P> doesn't work
			cnoremap <C-O> <C-F>
			cnoremap <C-G> <Del>
			inoremap <C-J>	<Down>
			inoremap <C-K>	<Up>
			"inoremap <C-N>	<C-[>
			"inoremap <C-C>	<C-N>
		"windows
			noremap <C-J>	<C-W>_
			noremap <C-M>	<C-W>=
			noremap	x 	:q<CR>
			noremap	q	:q!<CR>
			map <C-P>	<C-W>w :bn <CR> <C-X> <C-W>v <C-W>w :e # <CR>
			"map p	<C-X> <C-W>s <C-W>w :e # <CR>
			"can put same safeguard of C-w w + :bn in order to create #
			map j	<C-W>j
			map k	<C-W>k
		"regexp
			map <C-I>t	:ts /_t_*/
			map <C-I>w	:s/\s\+$//
			map <C-I>v	:s/^\(\t*\)/\1\[%#/ <CR> <BAR> :s/$/%\]/<CR><BAR>:noh<CR>
			map <C-I>f	:s/^\(\s\+\)\[%#/\1/ <CR> <BAR> :s/%\]$//<CR><BAR>:noh<CR>
			map <C-I>c	:s/^\(\s*\)/\1#/ <CR> <BAR>:noh<CR>
				"prepends each line with # and preserves indents,useful for programming
			map <C-I>d	:s/^\(\s\+\)#/\1/ <CR> <BAR>:noh<CR>
				"undoes the above, useful for programming
		"alt
			"mneumonics:t-tag,l-link,o-option,b-buffer,p-perl,a-admin,w-web,m-misc
			map b	:buffers <CR>
			map cx	:new <BAR> exe " %!g++ -o " . substitute (@#,"\.cpp","",'')." #"<CR>
			"map cx	:let arg = inputdialog("Arguments?: ","") <BAR> :!g++ -o a.out # <BAR> exe "new <BAR> %! ./# ".arg <CR>
			map mm :emenu <C-Z>
			map cw :new <BAR>r! 
				"get output of a shell command in new window
			map io :call Tabp() <CR>
				"increases the indent by a space
			map iu :call Tabm() <CR>
				"decreases the indent by a space
			map ta	:ta _tag_
				"access any tag from anywhere in outline by typing its name (don't forget autocomplete)
			map ts	:stj _tag_
			map tj	:exe ":ta " expand("<cword>")<CR>
			map tm :!/usr/share/vim/vim62/tools/pltags.pl %<CR>
			map tv :!vo_maketags.pl %<CR>
			map l	:exe "normal v$hy" <BAR> exe "/".@" <CR>
			map on	:set invnumber <CR>
			map om	:set invmagic <CR>
			map oa	:set invautowrite <CR>
			map oc	:set invignorecase <CR>
			map oi	:set invincsearch <CR>
			map ol	:set invlist <CR>
			map of	:set foldmethod=expr <CR>
			map ow	:set invwildmenu <CR>
			map or	:set invwrap <CR>
			map ob	:set invswitchbuf <CR>
			map oh	:noh <CR>
			map ,		:set imi=0<CR>
			map .		:set imi=1<CR>
			map z	:!perldoc -t <cword> <BAR>festival --tts<CR>
			map a	[I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
			"map a	:!festival --tts <cword> <CR>
			map pt	:Tabber   
				"this indents a range of lines by the indent number you provide
				"u can highlight a range of lines and with this set them to the same indent
			map pp	:call Smartpaste()<CR>
			map pf	:exe "new <BAR> %!perldoc -U -f ". expand("<cword>")<CR>
			map po	:exe "new <BAR> %!perldoc -U " expand("<cword>")<CR>
			map px	:let arg = inputdialog("Arguments?: ","") <BAR> exe "new <BAR> %! ./"."# ". arg <CR>
			"map px	:let arg = inputdialog("Arguments?: ","") <BAR> exe "new <BAR> %! # ". arg <CR>
			map s	:w<CR>
			map ac	:lcd %:p:h <CR>
			map am	:!chmod +x %<CR>
			map h	yaw :exe "h ".@" <CR>
			map wt	:call TagSelection()<CR>
			map wh	:!lynx http://www.willcam.com/cmat/html/crossref.html<CR>
			map wp	:set path+=/home/bozo/docs/work/shim/tmpl/src,/home/bozo/docs/work/shim/tmpl/lib<CR>
			map wo	:set path=,.,,/home/bozo/docs/work/shim/tmpl/mysrc,/home/bozo/docs/work/shim/tmpl/mylib<CR>
			"map wh	:exe "!echo /". expand("<cword>")." >  ~/bin/temp/lynx.tmp" <BAR> :!lynx -cmd_script="~/bin/temp/lynx.tmp" http://www.willcam.com/cmat/html/crossref.html<CR>
			"map   ,. :source $HOME/.vimoutliner/outliner.vim<CR>
			map   ,. :source $HOME/.vim/ftplugin/vo_base.vim<CR>
		"movement
			map  -u dd k P
				"move line up one
			map  -d dd p
				"move line down one
		"otl
			map -j :call Omove("j") <CR>		
				"moves down to the next node with same indent level,
				"note: it times out if there are no further nodes to go down to, press C-c to break out
			map -k :call Omove("k") <CR>	
				"moves up to the next node with same indent level
			map -f O <C-[> k dd 
				"use this to fix lines that have an incorrect foldlevel
			map -sw	dd v ]z <<
				"delete current node and unindent the following node and its children
			map  -e v ]z zo
				"local folding: expands children of cursor node by one level 
		"map qr F, v f, h d f, h p "have to go back to first column for 1st item
		" map ql f, v F, l 
		" m,t,i,y,j,h
	"ab
		ab so0 ~/.vimrc
		ab so1 ~/.myvim
		ab so2 ~/.vim/ftplugin/vo_base.vim
		ab so3 ~/.vim/syntax/vo_base.vim
		ab so4 ~/.vimoutliner/outliner.vim 
	"plugins
		"so $VIMRUNTIME/ftplugin/man.vim
	"options
		"au BufEnter *.otl :so ~/.vimoutliner/outliner.vim "worked after 'setf outliner' on one .otl
		" Use perl compiler for all *.pl and *.pm files.
		autocmd BufNewFile,BufRead *.p? compiler perl
		filetype plugin on
		filetype indent on
		"set complete +=k
		set wildmode=list:longest
		set invsmartcase
		set isf+=:
		set ww+=h,l
		set textwidth=100
		"set runtimepath=~/.vim/,/usr/share/vim/vim61/
	"misc
		set notagbsearch
